from typing import Self
from astropy.io import fits
from copy import deepcopy
from colorist import BrightColor as C
from time import strftime


class FitsFile:
    """
    Encapsulates the methods specific to .fits files.
    """

    def copy(self) -> Self:
        return deepcopy(self)

    @staticmethod
    def save(filename: str, hdu_list: fits.HDUList, overwrite: bool = False, save_checkpoint: bool = True):
        """
        Saves to a file.

        Parameters
        ----------
        filename : str
            Indicates the path and name of the created file. If the file already exists, a warning will appear and the
            file can be overwritten.
        hdu_list : fits.HDUList
            List of HDU objects to save.
        overwrite : bool, default=False
            Specifies if the file should automatically be erased.
        save_checkpoint : bool, default=True
            If an error occurs during the saving process, a checkpoint file will be created with the current date and
            time in the filename. This is useful to prevent data loss.
        """
        try:
            hdu_list.writeto(filename, overwrite=overwrite, output_verify="warn")
        except Exception as e:
            # Only catch exceptions related to an already existing file
            if (
                isinstance(e, OSError)
                and isinstance(e.args[0], str)
                and e.args[0][-31:] == " the argument \"overwrite=True\"."
            ):
                while True:
                    decision = input(f"{C.RED}{filename} already exists, do you wish to overwrite it? [y/n]{C.OFF}")
                    if decision.lower() == "y":
                        hdu_list.writeto(filename, overwrite=True, output_verify="warn")
                        print(f"{C.GREEN}File overwritten.{C.OFF}")
                        break
                    elif decision.lower() == "n":
                        break
            elif save_checkpoint:
                checkpoint_filename = f"autogenerated_fits_file_checkpoint_at_{strftime("%Y-%m-%d_%Hh%Mm%Ss")}.fits"
                hdu_list.writeto(checkpoint_filename, overwrite=True, output_verify="ignore")
                print(C.GREEN + "File saved automatically upon error to", checkpoint_filename + C.OFF)
                raise e
