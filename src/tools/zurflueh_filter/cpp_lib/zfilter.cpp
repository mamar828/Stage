#include <iostream>
#include <numeric>
#include <omp.h>

#include "zfilter.h"

using namespace std;

typedef vector<vector<double>> vector_2d;

/**
 * \brief Computes the Zurflueh filter of a two-dimensional array.
 */
vector_2d zfilter(const vector_2d& input_array)
{
    int height = input_array.size(), width = input_array[0].size();
    vector_2d output_array(height, vector<double>(width, numeric_limits<float>::quiet_NaN()));

    vector_2d filter_ = {
        {      0.0,-0.001256,-0.002512,-0.003558,-0.003977,-0.003977,-0.003767,-0.003977,-0.003977,-0.003558,-0.002512,-0.001256,      0.0},
        {-0.001256, -0.00293,-0.003139,-0.003767,-0.003558,-0.002512,-0.002093,-0.002512,-0.003558,-0.003767,-0.003139, -0.00293,-0.001256},
        {-0.002512,-0.003139,-0.003349,-0.002512,-0.001047, 0.003349, 0.005023, 0.003349,-0.001047,-0.002512,-0.003349,-0.003139,-0.002512},
        {-0.003558,-0.003767,-0.002512, 0.001256, 0.010883, 0.018418, 0.022189, 0.018418, 0.010883, 0.001256,-0.002512,-0.003767,-0.003558},
        {-0.003977,-0.003558,-0.001047, 0.010883,  0.02365, 0.032231, 0.036836, 0.032231,  0.02365, 0.010883,-0.001047,-0.003558,-0.003977},
        {-0.003977,-0.002512, 0.003349, 0.018418, 0.032231, 0.043533, 0.049812, 0.043533, 0.032231, 0.018418, 0.003349,-0.002512,-0.003977},
        {-0.003767,-0.002093, 0.005023, 0.022189, 0.036836, 0.049812, 0.054835, 0.049812, 0.036836, 0.022189, 0.005023,-0.002093,-0.003767},
        {-0.003977,-0.002512, 0.003349, 0.018418, 0.032231, 0.043533, 0.049812, 0.043533, 0.032231, 0.018418, 0.003349,-0.002512,-0.003977},
        {-0.003977,-0.003558,-0.001047, 0.010883,  0.02365, 0.032231, 0.036836, 0.032231,  0.02365, 0.010883,-0.001047,-0.003558,-0.003977},
        {-0.003558,-0.003767,-0.002512, 0.001256, 0.010883, 0.018418, 0.022189, 0.018418, 0.010883, 0.001256,-0.002512,-0.003767,-0.003558},
        {-0.002512,-0.003139,-0.003349,-0.002512,-0.001047, 0.003349, 0.005023, 0.003349,-0.001047,-0.002512,-0.003349,-0.003139,-0.002512},
        {-0.001256, -0.00293,-0.003139,-0.003767,-0.003558,-0.002512,-0.002093,-0.002512,-0.003558,-0.003767,-0.003139, -0.00293,-0.001256},
        {      0.0,-0.001256,-0.002512,-0.003558,-0.003977,-0.003977,-0.003767,-0.003977,-0.003977,-0.003558,-0.002512,-0.001256,      0.0}
    };

    #pragma omp parallel for collapse(2)
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            if (isnan(input_array[y][x])) continue;
            double filtered_val = 0.0, sum = 0.0;
            for (int j = max(0, 6 - y); j < min(13, height - y + 6); j++)
            {
                for (int i = max(0, 6 - x); i < min(13, height - x + 6); i++)
                {
                    if (isnan(input_array[y+j - 6][x+i - 6])) continue;
                    filtered_val += filter_[j][i] * input_array[y+j - 6][x+i - 6];
                    sum += filter_[j][i];
                }
            }
            output_array[y][x] = filtered_val / sum;
        }
    }
    return output_array;
}
